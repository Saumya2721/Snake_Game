#include <iostream>
#include <conio.h>  // For _getch() and kbhit()
#include <cstdlib>  // For rand() and srand()
#include <ctime>    // For time()

using namespace std;

// Function to create a delay
void timedelay(int milliseconds) {
    clock_t start_time = clock();
    while (clock() < start_time + milliseconds * CLOCKS_PER_SEC / 1000);
}

// Constants for game dimensions
const int WIDTH = 60;
const int HEIGHT = 30;

// Enumeration for directions
enum Direction { STOP = 0, UP, DOWN, LEFT, RIGHT };

// SnakeGame Class
class SnakeGame {
private:
    // Game State Variables
    bool gameOver;
    int score;
    static int highScore;
    int x, y;  // Snake's head position
    int foodX, foodY;  // Food position
    int tailX[100], tailY[100];  // Snake's tail positions
    int tailLength;  // Length of the snake's tail
    Direction dir;  // Current direction of the snake

    // Helper Function: Places food on the grid
    void spawnFood() {
        foodX = rand() % WIDTH;
        foodY = rand() % HEIGHT;
        // Ensure food doesn't spawn on the snake
        for (int i = 0; i < tailLength; i++) {
            if (foodX == tailX[i] && foodY == tailY[i]) {
                spawnFood();  // Re-spawn food if it overlaps the snake
                break;
            }
        }
    }

public:
    // Constructor: Initializes the game
    SnakeGame() { 
        resetGame();
    }

    void resetGame() {
        gameOver = false;
        dir = STOP;
        x = WIDTH / 2;
        y = HEIGHT / 2;
        score = 0;
        tailLength = 3;
        for (int i = 0; i < tailLength; i++) {
        tailX[i] = x - (i + 1);  // Place tail behind the head
        tailY[i] = y;
    }
        spawnFood();  // Spawn the first food
    }

    // Display the grid and game status
    void draw() {
        system("cls");  // Clear the console

        // Draw the top border
        for (int i = 0; i < WIDTH + 2; i++) cout << "#";
        cout << endl;

        // Draw the grid
        for (int i = 0; i < HEIGHT; i++) {
            for (int j = 0; j < WIDTH; j++) {
                if (j == 0) cout << "#";  // Left border

                // Snake's head
                if (i == y && j == x)
                    cout << "O";
                // Food
                else if (i == foodY && j == foodX)
                    cout << "F";
                // Snake's tail
                else {
                    bool isTail = false;
                    for (int k = 0; k < tailLength; k++) {
                        if (tailX[k] == j && tailY[k] == i) {
                            cout << "o";
                            isTail = true;
                        }
                    }
                    if (!isTail) cout << " ";
                }

                if (j == WIDTH - 1) cout << "#";  // Right border
            }
            cout << endl;
        }

        // Draw the bottom border
        for (int i = 0; i < WIDTH + 2; i++) cout << "#";
        cout << endl;

         // Display score
        cout << "Score: " << score << " | High Score: " << highScore << endl;
        cout << "Controls: W/A/S/D to move, X to quit" << endl;
        
    }

    // Handle player input
    void input() {
        if (_kbhit()) {  // Check if a key is pressed
            switch (_getch()) {
            case 'w': dir = (dir != DOWN) ? UP : DOWN; break;
            case 's': dir = (dir != UP) ? DOWN : UP; break;
            case 'a': dir = (dir != RIGHT) ? LEFT : RIGHT; break;
            case 'd': dir = (dir != LEFT) ? RIGHT : LEFT; break;
            case 'x': gameOver = true; break;  // Exit the game
            }
        }
    }

    // Update game logic
    void logic() {
        // Update tail positions
        int prevX = tailX[0];
        int prevY = tailY[0];
        int prev2X, prev2Y;
        tailX[0] = x;
        tailY[0] = y;
        // tailX[1] = x+1;
        // tailY[1] = y;
        // tailX[2] = x+2;
        // tailY[2] = y;
        // tailX[3] = x+1;
        // tailY[3] = y;
        

        for (int i = 1; i < tailLength; i++) {
            prev2X = tailX[i];
            prev2Y = tailY[i];
            tailX[i] = prevX;
            tailY[i] = prevY;
            prevX = prev2X;
            prevY = prev2Y;
        }

        // Move the snake's head
        switch (dir) {
        case UP: y--; break;
        case DOWN: y++; break;
        case LEFT: x--; break;
        case RIGHT: x++; break;
        default: break;
        }

        // Check for collisions with boundaries
        if (x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT)
            gameOver = true;

        // Check for collisions with tail
        for (int i = 4; i < tailLength; i++) {
            if (tailX[i] == x && tailY[i] == y) {
                gameOver = true;
            }
        }

        // Check if food is eaten
        if (x == foodX && y == foodY) {
            score += 10;
            if (score > highScore) {
                highScore = score;
            } // Update high score
            tailLength++;  // Increase the snake's length
            spawnFood();  // Spawn new food
        }
    }

    // Check if the game is over
    bool isGameOver() {
        return gameOver;
    }

     int getscore()
    {
        return score;
    }

    int getHighScore() { 
        return highScore;
     }

     // Initialize static highscore variable
   
     void gameOverScreen() {
        cout << "\nGAME OVER! Your Final Score: " << score << endl;
        cout << "High Score: " << highScore << endl;
        cout << "Press R to Restart, X to Exit: ";

        char choice;
        do {
            choice = _getch();
        } while (choice != 'r' && choice != 'x');

        if (choice == 'r') {
            resetGame();  // Restart the game
        }
    }

};
 int SnakeGame::highScore = 0;


// Main Function
int main() {
    char c;
    srand(time(0));  // Seed the random number generator
    

    cout << "Select difficulty level" << endl;
    cout << "1) Easy " << endl;
    cout << "2) Medium " << endl;
    cout << "3) Hard " << endl;

    char diff;
    cin >> diff;
    
    if (diff != '1' && diff != '2' && diff != '3') {
        cout << "Enter proper difficulty level!" << endl;
        return 0;
    }

    do{
        SnakeGame game;  // Create a game object

    // Game loop
   while (!game.isGameOver()) {
        game.draw();
        game.input();
        game.logic();
        if (diff == '1'){
            timedelay(200);
        }
        else if (diff == '2'){
            timedelay(50);
        }
        else if (diff == '3'){
            timedelay(10);
        }
    }
    game.draw();

    // Game Over Screen
    game.gameOverScreen();
    cin>>c;

    }while(c=='R'||c=='r');

    
    return 0;
}
